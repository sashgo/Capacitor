name: Build iOS
run-name: Creating Production Ready iOS App ðŸš€
on:
  push:
      branches:
      - main
  workflow_dispatch:

jobs:
  build_ios:
    name: Build IPA
    runs-on: macos-13

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ''

      - name: Setup Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.2.app
        
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version
        
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.8.1
        with:
          check-latest: true

      - name: install dependencies
        run: npm ci

      - name: Create Build Folder
        run: npm run build

      # - name: Run App
      #   run: ng run app:build:production


      # - name: Add ios folder if not present
      #   run: if [ ! -d "./ios" ]; then npx cap add ios; fi

      - name: Capacitor sync
        run: npx cap sync

      # - name: Capacitor update
      #   run: npx cap update

      # - name: Capacitor copy
      #   run: npx cap copy

      # - name: Update fastlane
      #   run: gem install fastlane

      # - name: Buil iOS
      #   run: npx cap build ios

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/Certificates_Dev.p12
          PP_PATH=$RUNNER_TEMP/unitecloud_dev.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles  
      

      - name: build archive
        run: xcodebuild -workspace ./ios/App/App.xcworkspace -scheme App -sdk iphoneos -configuration Release -destination generic/platform=iOS

      - name: export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/I\ am\ Groot.ipa
          # you can also archive the entire directory 
          # path: ${{ runner.temp }}/build
          retention-days: 3
        
        
  #     - name: iOS Build/Release Action
  #       # You may pin to the exact commit or the version.
  #       uses: hectorguerrini/build-ios-action@v1.0.4
  #       with:
  #         # Project path
  #         project-path: ./ios/App/App.xcodeproj
  #         # Base64 encoded p12 file (key + cert)
  #         p12-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         # Base64 encoded mobileprovision file
  #         mobileprovision-base64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  #         # For example, iOS Distribution
  #         code-signing-identity: Apple Distribution
  #         # Team id
  #         team-id: TUGFNJHXEQ
  #         # # Workspace path
  #         workspace-path: ./ios/App/App.xcworkspace # optional, default is 
  #         # Options app-store, ad-hoc, package, enterprise, development, or developer-id
  #         export-method: ad-hoc # optional, default is development
  #         # For example, Debug, Release
  #         configuration: Release # optional, default is Release
  #         # Certificate password
  #         certificate-password: ${{ secrets.P12_PASSWORD }} # optional, default is 
  #         # # Output path of ipa
  #         # output-path: # optional, default is output.ipa
  #         # # Scheme
  #         # scheme: # optional, default is 
  #         # # Targets to disable automatic code signing. Input targets separated by ,. For example, 'MyApp,YourApp'.
  #         # disable-targets: # optional, default is 
  #         # # Boolean to tell if `pod install` should be run during build.
  #         # build-pods: # optional
  #         # # The path to the Podfile.
  #         # pods-path: # optional, default is Podfile

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: output.ipa
  #         path: /Users/runner/work/Capacitor/Capacitor/output.ipa # Path to your IPA file will usually be 

  # distribute-ios:
  #   needs: build_ios # This is important
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: output.ipa

  #     - name: Distribute to AppCenter
  #       # You may pin to the exact commit or the version.
  #       # uses: wzieba/AppCenter-Github-Action@70e33d4842b97b381833ad5c9c93a562b39d5d9f
  #       uses: wzieba/AppCenter-Github-Action@v1.3.4
  #       with:
  #         # App name followed by username e.g. wzieba/Sample-App
  #         appName: sashgo/Capacitor-ios
  #         # Upload token - you can get one from appcenter.ms/settings
  #         token: ${{ secrets.APP_CENTER_TOKEN_IOS }}
  #         # Distribution group
  #         group: Mobile
  #         # Artefact to upload (.ipa)
  #         file: output.ipa
  #         # # Build version parameter required for .zip, .msi, .pkg and .dmg files
  #         # buildVersion: # optional
  #         # # Build number parameter required for macOS .pkg and .dmg files
  #         # buildNumber: # optional
  #         # # Release notes visible on release page
  #         # releaseNotes: # optional
  #         # # Generate release notes based on the latest git commit
  #         # gitReleaseNotes: # optional
  #         # # If true, send an email notification to the distribution group
  #         # notifyTesters: # optional
  #         # # If true, shows additional information from the action execution
          # debug: # optional



